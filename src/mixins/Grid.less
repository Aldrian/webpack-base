@import (reference) "../References.less";

/**
 * Grid Container
 */
.gridContainer(@max-width: @max-width-grid-px) {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  max-width: @max-width;
}

/**
 * Use grid on every selector
 * ex: .gridFactor(padding, 3, true);
 */
.gridFactor
  (@selector, @column-number, @with-last-gutter:false, @with-margin: 0) {
  & when (@with-last-gutter = false) {
    @{selector}: ~"calc(
    (
      (100% / @{total-column-number}) * @{column-number})
      +
      (@{gutter-size-px} / @{total-column-number} * @{column-number})
      -
      @{gutter-size-px}
    )
  ";
  }
  // with last gutter
  & when (@with-last-gutter = true) {
    @{selector}: ~"calc(
    (
      (100% / @{total-column-number}) * @{column-number})
      +
      (@{gutter-size-px} / @{total-column-number} * @{column-number})
    )
  ";
  }
}
/**
 * Center element in grid
 */
.centerColumnGrid (@column-number:10) {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  width: ~"calc(
    (
      (100% / @{total-column-number}) * @{column-number})
      +
      (@{gutter-size-px} / @{total-column-number} * @{column-number})
      -
      @{gutter-size-px}
    )
  ";
}
.resetCenterColumnGrid() {
  margin-left: 0;
  margin-right: 0;
  width: auto;
}
